# Security-hardened nginx configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Hide nginx version
    server_tokens off;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;

    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        # Disable unnecessary methods
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }
        
        # Block common exploits
        if ($request_uri ~* "(\.\./|\.\.\\|%2e%2e%2f|%2e%2e/|\.\.%2f|%2e%2e%5c|%2e%2e\\|\.%2e/|\.%2e%2f|%2e\.%2f|%2e\./|\.%2e\\|\.%2e%5c|%2e\.%5c|%2e\.\\)") {
            return 400;
        }
        
        # Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Main application
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri /index.html;
            
            # Cache control for static assets
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
                expires 30d;
                add_header Cache-Control "public, immutable";
                limit_req zone=static burst=50 nodelay;
            }
            
            # Security for HTML files
            location ~* \.html?$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }
        
        # Block access to sensitive files
        location ~* \.(git|svn|htaccess|htpasswd|log|env|yml|yaml|sql|db|backup|bak|config)$ {
            deny all;
            return 404;
        }
        
        # Custom error pages
        error_page 400 401 402 403 404 /40x.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /40x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Health check endpoint
        location = /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }
        
        # Deny access to nginx config files
        location ~ /nginx\.conf {
            deny all;
        }
    }
}